#!/bin/sh
#
# Sets up the secret encrypted file

set -eu

umask 077

if [ -b /dev/mapper/secret ]; then
	cryptsetup luksClose secret
fi

printf "\e[1;33m"
cat << EOF
*------------------------------------------------------------------------*
| On the following prompts enter the same password, this password        |
| does not matter because it will be deleted later on, but               |
| systemd-cryptenroll does not seem happy to accept password from stdin. |
*------------------------------------------------------------------------*
EOF
printf "\e[0m"

# less than 32M is not recommended as the headers already take 16M
truncate -s 32M /var/secret.enc

cryptsetup luksFormat /var/secret.enc

cryptsetup luksOpen /var/secret.enc secret

dd if=/dev/zero of=/dev/mapper/secret bs=64K || true

cryptsetup luksClose secret

systemd-cryptenroll /var/secret.enc --recovery-key

printf "\e[1;34m"
cat << EOF
*----------------------------------------------------------------------------*
| Now you will get asked for the same password again, and then for the PIN   |
| you will use to unlock the secret.                                         |
|                                                                            |
| Also, make sure you store the recovery key above and in a secure location. |
*----------------------------------------------------------------------------*
EOF
printf "\e[0m"
# this will lock with PCR7 (secure boot) and a PIN
systemd-cryptenroll --tpm2-pcrs=7 --tpm2-with-pin=true \
	--tpm2-device=auto /var/secret.enc
	
# this will remove the random password we set before and leave
# only the recovery key
systemd-cryptenroll --wipe-slot=0 /var/secret.enc

printf "\e[1;32m"
cat << EOF
*-------------------------------------------------------*
| All done! You can now store a key with tpm-secret-set |
*----------------------------------------------------- -*
EOF
printf "\e[0m"

